using System;
using UnityEngine;

namespace CosmicLoader
{
    public class UnityObject : MonoBehaviour
    {
        public Action AwakeAction = () => { };
        public Action FixedUpdateAction = () => { };
        public Action LateUpdateAction = () => { };
        public Action<int> OnAnimatorIKAction = layerIndex => { };
        public Action OnAnimatorMoveAction = () => { };
        public Action<bool> OnApplicationFocusAction = hasFocus => { };
        public Action<bool> OnApplicationPauseAction = pauseStatus => { };
        public Action OnApplicationQuitAction = () => { };
        public Action<float[], int> OnAudioFilterReadAction = (data, channel) => { };
        public Action OnBecameInvisibleAction = () => { };
        public Action OnBecameVisibleAction = () => { };
        public Action<Collision> OnCollisionEnterAction = collision => { };
        public Action<Collision2D> OnCollisionEnter2DAction = collision => { };
        public Action<Collision> OnCollisionExitAction = collision => { };
        public Action<Collision2D> OnCollisionExit2DAction = collision => { };
        public Action<Collision> OnCollisionStayAction = collision => { };
        public Action<Collision2D> OnCollisionStay2DAction = collision => { };
        public Action OnConnectedToServerAction = () => { };
        public Action<ControllerColliderHit> OnControllerColliderHitAction = hit => { };
        public Action OnDestroyAction = () => { };
        public Action OnDisableAction = () => { };
        public Action OnDrawGizmosAction = () => { };
        public Action OnDrawGizmosSelectedAction = () => { };
        public Action OnEnableAction = () => { };
        public Action OnGUIAction = () => { };
        public Action<float> OnJointBreakAction = breakForce => { };
        public Action<Joint2D> OnJointBreak2DAction = brokenJoint => { };
        public Action OnMouseDownAction = () => { };
        public Action OnMouseDragAction = () => { };
        public Action OnMouseEnterAction = () => { };
        public Action OnMouseExitAction = () => { };
        public Action OnMouseOverAction = () => { };
        public Action OnMouseUpAction = () => { };
        public Action OnMouseUpAsButtonAction = () => { };
        public Action<GameObject> OnParticleCollisionAction = gameObject => { };
        public Action OnParticleSystemStoppedAction = () => { };
        public Action OnParticleTriggerAction = () => { };
        public Action OnParticleUpdateJobScheduledAction = () => { };
        public Action OnPostRenderAction = () => { };
        public Action OnPreCullAction = () => { };
        public Action OnPreRenderAction = () => { };
        public Action<RenderTexture, RenderTexture> OnRenderImageAction = (src, dest) => { };
        public Action OnRenderObjectAction = () => { };
        public Action OnServerInitializedAction = () => { };
        public Action OnTransformChildrenChangedAction = () => { };
        public Action OnTransformParentChangedAction = () => { };
        public Action<Collider> OnTriggerEnterAction = collider => { };
        public Action<Collider2D> OnTriggerEnter2DAction = collider => { };
        public Action<Collider> OnTriggerExitAction = collider => { };
        public Action<Collider2D> OnTriggerExit2DAction = collider => { };
        public Action<Collider> OnTriggerStayAction = collider => { };
        public Action<Collider2D> OnTriggerStay2DAction = collider => { };
        public Action OnValidateAction = () => { };
        public Action OnWillRenderObjectAction = () => { };
        public Action ResetAction = () => { };
        public Action StartAction = () => { };
        public Action UpdateAction = () => { };
        public void Awake() => AwakeAction();
        public void FixedUpdate() => FixedUpdateAction();
        public void LateUpdate() => LateUpdateAction();
        public void OnAnimatorIK(int layerIndex) => OnAnimatorIKAction(layerIndex);
        public void OnAnimatorMove() => OnAnimatorMoveAction();
        public void OnApplicationFocus(bool hasFocus) => OnApplicationFocusAction(hasFocus);
        public void OnApplicationPause(bool pauseStatus) => OnApplicationPauseAction(pauseStatus);
        public void OnApplicationQuit() => OnApplicationQuitAction();
        public void OnAudioFilterRead(float[] data, int channels) => OnAudioFilterReadAction(data, channels);
        public void OnBecameInvisible() => OnBecameInvisibleAction();
        public void OnBecameVisible() => OnBecameVisibleAction();
        public void OnCollisionEnter(Collision collision) => OnCollisionEnterAction(collision);
        public void OnCollisionEnter2D(Collision2D collision) => OnCollisionEnter2DAction(collision);
        public void OnCollisionExit(Collision collision) => OnCollisionExitAction(collision);
        public void OnCollisionExit2D(Collision2D collision) => OnCollisionExit2DAction(collision);
        public void OnCollisionStay(Collision collision) => OnCollisionStayAction(collision);
        public void OnCollisionStay2D(Collision2D collision) => OnCollisionStay2DAction(collision);
        public void OnConnectedToServer() => OnConnectedToServerAction();
        public void OnControllerColliderHit(ControllerColliderHit hit) => OnControllerColliderHitAction(hit);
        public void OnDestroy() => OnDestroyAction();
        public void OnDisable() => OnDisableAction();
        public void OnDrawGizmos() => OnDrawGizmosAction();
        public void OnDrawGizmosSelected() => OnDrawGizmosSelectedAction();
        public void OnEnable() => OnEnableAction();
        public void OnGUI() => OnGUIAction();
        public void OnJointBreak(float breakForce) => OnJointBreakAction(breakForce);
        public void OnJointBreak2D(Joint2D brokenJoint) => OnJointBreak2DAction(brokenJoint);
        public void OnMouseDown() => OnMouseDownAction();
        public void OnMouseDrag() => OnMouseDragAction();
        public void OnMouseEnter() => OnMouseEnterAction();
        public void OnMouseExit() => OnMouseExitAction();
        public void OnMouseOver() => OnMouseOverAction();
        public void OnMouseUp() => OnMouseUpAction();
        public void OnMouseUpAsButton() => OnMouseUpAsButtonAction();
        public void OnParticleCollision(GameObject gameObject) => OnParticleCollisionAction(gameObject);
        public void OnParticleSystemStopped() => OnParticleSystemStoppedAction();
        public void OnParticleTrigger() => OnParticleTriggerAction();
        public void OnParticleUpdateJobScheduled() => OnParticleUpdateJobScheduledAction();
        public void OnPostRender() => OnPostRenderAction();
        public void OnPreCull() => OnPreCullAction();
        public void OnPreRender() => OnPreRenderAction();
        public void OnRenderImage(RenderTexture src, RenderTexture dest) => OnRenderImageAction(src, dest);
        public void OnRenderObject() => OnRenderObjectAction();
        public void OnServerInitialized() => OnServerInitializedAction();
        public void OnTransformChildrenChanged() => OnTransformChildrenChangedAction();
        public void OnTransformParentChanged() => OnTransformParentChangedAction();
        public void OnTriggerEnter(Collider collider) => OnTriggerEnterAction(collider);
        public void OnTriggerEnter2D(Collider2D collider) => OnTriggerEnter2DAction(collider);
        public void OnTriggerExit(Collider collider) => OnTriggerExitAction(collider);
        public void OnTriggerExit2D(Collider2D collider) => OnTriggerExit2DAction(collider);
        public void OnTriggerStay(Collider collider) => OnTriggerStayAction(collider);
        public void OnTriggerStay2D(Collider2D collider) => OnTriggerStay2DAction(collider);
        public void OnValidate() => OnValidateAction();
        public void OnWillRenderObject() => OnWillRenderObjectAction();
        public void Reset() => ResetAction();
        public void Start() => StartAction();
        public void Update() => UpdateAction();
    }
}
